
from turtle import *
from datetime import datetime
import time
from math import *


def jump(distance, angle=0):##Angle
    penup()                 ##Pull the pen up – no drawing when moving.
    right(angle)            ##Définit angle de départ de l'aiguille
    forward(distance)       ##Détermine la position de l'ensemble de l'horloge sur l'écran
    left(angle)             ##Définit angle de départ de l'aiguille
    pendown()               ##Pull the pen down – drawing when moving

def hand(longueur, hauteur): ##Aiguille
    forward(longueur*1.15)       ##Taille du corps de l'aiguille
    right(90)                  ##Angle entre le bas de la tête de l'aiguille et du corps de l'aiguille
    forward(hauteur/2.0)         ##Epaisseur de l'aiguille
    left(120)                 ##Angle entre le bas de la tête de l'aiguille et du corps de l'aiguille
    forward(hauteur)
    left(120)
    forward(hauteur)
    left(120)
    forward(hauteur/2.0)

def make_hand_shape(name, longueur, hauteur): ##Pointe de l'aguille
    reset()
    jump(-longueur*0.15)            ##définit la position des aiguilles dnas l'espace
    begin_poly()
    hand(longueur, hauteur)         ##définit la longueur de l'aiguille et de la tête de l'aiguille
    end_poly()
    hand_form = get_poly()
    register_shape(name, hand_form)

def clockface(radian): ##L'image de l'horloge avec les points
    reset()
    pensize()
    for i in range(60):
        jump(radian)
        if i % 5 == 0:
            forward(25)
            jump(-radian-25)
        else:
            dot(3)
            jump(-radian)
        right(6)

def setup():
    global dixsecond_hand, second_hand, minute_hand, writer
    mode("logo")
    make_hand_shape("dixsecond_hand", 125, 25)    ##Définition des trois aiguilles
    make_hand_shape("second_hand",  130, 25)
    make_hand_shape("minute_hand", 90, 25)
    clockface(160)                              ##Taille de l'horloge
    dixsecond_hand = Turtle()
    dixsecond_hand.shape("dixsecond_hand")      ##Définit l'aiguille des dixième de secondes
    dixsecond_hand.color("gray20", "gray80")
    second_hand = Turtle()                      ##Définit l'aiguille des secondes
    second_hand.shape("second_hand")
    second_hand.color("blue1", "red1")
    minute_hand = Turtle()                      ##Définit l'aiguille des minutes
    minute_hand.shape("minute_hand")
    minute_hand.color("blue3", "red3")
    for hand in second_hand, minute_hand, dixsecond_hand:
        hand.resizemode("user")
        hand.shapesize(1, 1, 3)
        hand.speed(1)                           ##Le temps que met l'aiguille à aller d'une pos 1 à une pos 2
    ht()
    writer = Turtle()
    #writer.mode("logo")
    writer.ht()
    writer.pu()
    writer.bk(85)


def tock():
    sec = 0
    min = 0
    dixsecfinal = 0
    dixsec = 0
    while dixsecfinal < 9:
        time.sleep(0.1)
        dixsec = dixsec + 1
        sec = sec + 0.1
        min = min + (0.1/60)
        secfinal = round(sec)
        minfinal = floor(min)
        if dixsec > 9:
            dixsec = 0
        elif sec > 59:
            sec = 0
        print(minfinal, ":", secfinal, ":", dixsec)
        try:
            tracer(False)
            writer.forward(65)
            writer.forward(85)
            tracer(True)
            dixsecond_hand.setheading(6*dixsec)       ##Mouvement des aiguilles
            second_hand.setheading(10*secfinal)
            minute_hand.setheading(10*minfinal)
            tracer(True)
            ontimer(tock, 100)                          ##Appelle la fonction tous les 1/10e sec
        except Terminator:                              ##Break fonction
            break



def main():
    tracer(False)
    print()
    setup()
    tracer()
    tock()
    return "Aurevoir!! Ha! Ha!"


if __name__ == "__main__":
    mode("logo")
    msg = main()
    print(msg)
    mainloop()







